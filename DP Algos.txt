//Longest Increasing Subsequence

int n;
ll arr[100005];

int lis()
{
	int mx_len[n], mx = 1;
	
	frw(c1, 0, n)
	{
		mx_len[c1] = 1;
	}
	
	frw(c1, 1, n)
	{
		frw(c2, 0, c1)
		{
			if(arr[c2]<arr[c1])
				mx_len[c1] = max(mx_len[c1],mx_len[c2]+1);
		}
		
		mx = max(mx,mx_len[c1]);
	}
	
	return mx;
}

//Longest Common Subsequence

string s1, s2;

int lcs()
{
	int l1 = s1.size(), l2 = s2.size();
	
	int arr[l1+1][l2+1];
	
	frw(c1, 0, l1+1)
	{
		frw(c2, 0, l2+1)
		{
			if(c1==0 || c2==0)
			{
				arr[c1][c2] = 0;
			}
			else if(s2[c2-1]==s1[c1-1])
			{
				arr[c1][c2] = arr[c1-1][c2-1]+1;
			}
			else
			{
				arr[c1][c2] = max(arr[c1-1][c2],arr[c1][c2-1]);
			}
			
		}
	}
	
	return arr[l1][l2];
}

//Edit Distance

string s1, s2;

int ed()
{
	int l1 = s1.size(), l2 = s2.size();
	
	int arr[l1+1][l2+1];
	
	frw(c1, 0, l1+1)
	{
		frw(c2, 0, l2+1)
		{
			if(c1==0)
			{
				arr[c1][c2] = c2;
			}
			else if(c2==0)
			{
				arr[c1][c2] = c1;
			}
			else if(s2[c2-1]==s1[c1-1])
			{
				arr[c1][c2] = arr[c1-1][c2-1];
			}
			else
			{
				arr[c1][c2] = min(arr[c1-1][c2-1],min(arr[c1-1][c2],arr[c1][c2-1]))+1;
			}
		}
	}
	
	return arr[l1][l2];
}

//0-1 Knapsack

int wt[10005], val[10005];

int knap(int n, int w)
{
	int arr[n+1][w+1];
	
	frw(c1, 0, n+1)
	{
		frw(c2, 0, w+1)
		{
			if(c1==0)
			{
				arr[c1][c2] = 0;
			}
			else if(c2<wt[c1-1])
			{
				arr[c1][c2] = arr[c1-1][c2];
			}
			else
			{
				arr[c1][c2] = max(arr[c1-1][c2],arr[c1-1][c2-wt[c1-1]]+val[c1-1]);
			}
		}
	}
	
	return arr[n][w];
}

//Longest Palindromic Subsequence

string s;

int lps()
{
	int l = s.size();
	
	int arr[l][l];
	
	for(int c1=1,c2=0 ; c1<l ; c1++,c2++)
	{
		arr[c1][c2] = 0;
	}
	
	frw(diff, 0, l)
	{
		for(int c1=0,c2=diff ; c1<(l-diff) ; c1++)
		{
			c2 = c1+diff;
			
			if(c1==c2)
			{
				arr[c1][c2] = 1;
			}
			else if(s[c1]==s[c2])
			{
				arr[c1][c2] = arr[c1+1][c2-1] + 2;
			}
			else
			{
				arr[c1][c2] = max(arr[c1+1][c2],arr[c1][c2-1]);
			}
		}
	}
	
	return arr[0][l-1];
}

//